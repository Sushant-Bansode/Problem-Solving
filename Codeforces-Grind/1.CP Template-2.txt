#include <bits/stdc++.h>
using namespace std;
//==============================================DEFINES=============================================
#define int   long long 
#define M 1000000007 //1e9+7
#define pi 3.1415926535897932384626
#define ff first
#define ss second
#define vi vector<int>
#define input(v) for(int &c:v)cin>>c;
#define vpi vector<pair<int,int>>
#define inputvpi(v)  for (int i = 0; i < n; i++){int x,y; cin>>x>>y; v.push_back({x,y}); }
#define all(v) v.begin(),v.end()
#define endl "\n"
#define fastio  cin.tie(0), cout.tie(0),ios_base::sync_with_stdio(false);


#ifndef ONLINE_JUDGE
#define debug(x) cerr << #x <<" "; _print(x); cerr << endl;
#else
#define debug(x)
#endif

void _print(int t) {cerr << t;}
void _print(string t) {cerr << t;}
void _print(char t) {cerr << t;}
void _print(double t) {cerr << t;}


template <class T, class V> void _print(pair <T, V> p);
template <class T> void _print(vector <T> v);
template <class T> void _print(set <T> v);
template <class T, class V> void _print(map <T, V> v);
template <class T> void _print(multiset <T> v);
template <class T, class V> void _print(pair <T, V> p) {cerr << "{"; _print(p.ff); cerr << ","; _print(p.ss); cerr << "}";}
template <class T> void _print(vector <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(multiset <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}




//===============================================Functions=============================================




//Modular subtraction
  int modsub(int a,int b,int c)
   { return ((a%c) - (b%c) + c)%c;}
 
 
 //Modular Power
  int modpow(int x,int n,int c)
  {
    int result=1;
    while(n>0) {if(n & 1) result=(result * x)%c ; x=(x*x) % c ; n>>=1;}
 
    return result;
  }


   //LCM
  int lcm(int a, int b)
  {
    return (a / __gcd(a, b)) * b;
  }


 //Modular Inverse (x is  inverse of b under modulo m)
 int modInverse(int b, int m) 
 { 
     return modpow(b,m-2,m); //Fermat's little theorem if(M = prime) else extended_gcd
 } 
  
  
 //MOdular Division
 int modDivide(int a, int b, int m) 
 { 
     a = a % m; 
     int inv = modInverse(b, m); 
     if (inv == -1) 
        return -1; 
     else
        return (inv * a) % m; 
 } 

const int N = 1e6+10;
const int INF=1e9+10;


//===================================================Code Here=========================================

vi g[N];
vi fact(N);
int ans=1;
int n,c;

int permut(int n,int r){
    if(n<r)return 0;
    if(r==0)return 1;

    int num = fact[n];
    int den = fact[n-r];
    return (num%M * modInverse(den,M)%M)%M ;   
}


vi vis(N+1,0);
void dfs(int i){
    vis[i]=1;
    if(i!=1)
    ans  = (ans%M * permut(c-2,g[i].size()-1)%M )%M;
    
    for(auto it:g[i]){
        if(!vis[it]){
            dfs(it);
        }
    }

}


void sol(){

fact[0]=fact[1]=1;
for (int i = 2; i <=N; i++)
{
    fact[i]=(fact[i-1]%M*i%M)%M;
}




cin>>n>>c;
for (int i = 0; i < n-1; i++)
{
    int u,v;
    cin>>u>>v;
    g[u].push_back(v);
    g[v].push_back(u);
}
ans = c%M;
ans = (ans%M * permut(c-1,g[1].size())%M )%M;
dfs(1);
cout<<ans%M;
}

 

//===================================================Main==============================================
signed main() {
  
     fastio;
    int T=1;
    // cin>>T;
   
    while(T--)
     sol();

}

